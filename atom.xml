<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>商丘古城</title>
  <subtitle>Cenrise</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cenrise.com/"/>
  <updated>2016-05-20T18:45:02.344Z</updated>
  <id>http://cenrise.com/</id>
  
  <author>
    <name>贾乙乙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&#39;商&#39;字的故事</title>
    <link href="http://cenrise.com/2016/05/21/%E5%95%86-%E5%AD%97%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://cenrise.com/2016/05/21/商-字的故事/</id>
    <published>2016-05-20T18:41:56.000Z</published>
    <updated>2016-05-20T18:45:02.344Z</updated>
    
    <content type="html">&lt;p&gt;商丘是远古时期商族的发源地。商族是一个伟大的氏族，在我国历史上作出了巨大的贡献，因此，对商族的研究便成了学者们的一大兴趣。其中对“商”字的研究也成了一个热门话题。“商”字是怎么来的？它又有怎样的寓意呢？&lt;/p&gt;
&lt;p&gt;学者王宁《原始天文学与夏商文化的起源》说，“商”字源于玄鸟。《诗经·商颂》载：“天命玄鸟，降而生商。”玄鸟在史书上一说是燕，一说是凤。燕子的说法占传统优势。战国时大诗人屈原在说到商族的起源时，在《天问》中这样提问；“玄鸟致贻，女何喜？”而在《离骚》中说：“有娀之佚女……凤凰既受诒兮, 恐高辛之先我”。前面说是燕子，后面说是凤凰，可见屈原认为玄鸟就是凤凰。中国的第一部辞典、最终成书于西汉的《尔雅》就把凤凰和燕子看为一体，认为凤凰就是燕子。玄鸟是商族的图腾，起初是凡鸟燕子，后来经过不断的渲染、神化，变成了虚构的神鸟凤凰。“商”和凤凰图腾又有什么关联呢？不妨找出甲骨文中的“鳳”字和“商”字来比较。鳳（凤的繁体）字的下部是鸟身的象形，上部是凤鸟头上的冠羽。商字的上部也是凤鸟头上的冠羽；下部有两种写法，一种带口字，一种不带。不带口的，好像是祭祀用的台子，带口的是祭祀的台子加上念念有词的嘴巴。根据鳳字创造出来的商字，表达的应该是在祭祀台子的上面摆置着神圣的凤凰的形象，人们念念有词的祭祀着凤凰，于是商成为族名。这寄托着商人对父系祖先玄鸟的尊崇和感激，表达商人对平安美好未来的向往，宣扬着商人的神圣和强大。&lt;/p&gt;
&lt;p&gt;又有学者认为，“商”字为大火星的象形字。《左传·襄公九年》载：“陶唐氏之火正阏伯居商丘，祀大火，而火纪时焉。相土因之，故商主大火。”在我国古代则称之为“大火”或“大辰”。早在远古时期，生活在黄河中下游地区的人们，在长期的生产和生活实践中，就逐渐认识和掌握了大火星宿的出没运行和气候变化之间的关系，以便正确地安排人们的生产和生活。正如气象学家竺可桢先生所说：“对于这些古代最早的农民来说，春季或生长季节的来临等这种知识乃是生产上急切所需要的。对于华北尤其如此，那儿的冬季更长、更冷。当公元前二至三千年时，天蝎座的中央部分，包括心宿二——中国的‘火星’（按：此星古名‘火’或‘大火’）——约于春分昏见，这成为一个大的时节。一个特任的官吏守望着这个星宿在东方地平线的出现。”这个“特任的官吏”就是古代所称作的“火正”。帝喾的儿子阏伯曾被封于商丘为“火正”，以观测和祭祀大火星宿而著称于世，他所观测和祭祀大火星宿的地方，就称作为“商丘”。先民们对于“大火”的出现奉为神灵，对它举行隆重的祭祀。古商字的上部，单字在甲骨文中的写法像火的形状，当为大火星宿的象形，有时又加上两个星的符号，足以证明它应是大火星宿的象形。可见商字本字当是在高台祭坛上置以大火星宿之形，是个会意字，显示在高台上祭祀大火星宿的形象。&lt;/p&gt;
&lt;p&gt;也有学者认为“商”字为“子”在“冈”上的商族。《史记》记载，商的始祖契因佐大禹治水有功被封于商，赐姓“子”。“商”字的甲骨文体，上从“子”，下从“丘”。上部的“子”字很像玄鸟头上的鸟冠；下部为丘岗之地或穴居之形。上部的“子”和下部的“丘”合在一起，意思是居住在丘岗之上的子姓氏族部落，称为商族。&lt;/p&gt;
&lt;p&gt;另有学者认为“商”字下部为器物底座或货架之形，上部“子”像架上置物之形；货架上放置着货物，会意为做买卖。商先公相土发明了马车，王亥发明了牛车，王亥开创了商族人对外贸易的先河。“商”字的结构与商族人开创经商先河的历史相符。“商”为做买卖的象形字。&lt;/p&gt;
&lt;p&gt;还有学者认为“商”为商先祖高辛氏的会意字。甲骨卜辞中的“商”字的写法，上部即高辛的“辛”。帝喾高辛氏是商始祖契的父亲、商族人的先族，如此造字体现了对商先祖的敬重与纪念。&lt;/p&gt;
&lt;p&gt;专家们从不同角度来说“商”的寓意，都不无道理。这充分说明了商文化含义之丰富，同时也说明了商丘就是商族的发源地、商族先公们的主要经营地，也是中国商业文化的发祥地。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;商丘是远古时期商族的发源地。商族是一个伟大的氏族，在我国历史上作出了巨大的贡献，因此，对商族的研究便成了学者们的一大兴趣。其中对“商”字的研究也成了一个热门话题。“商”字是怎么来的？它又有怎样的寓意呢？&lt;/p&gt;
&lt;p&gt;学者王宁《原始天文学与夏商文化的起源》说，“商”字源于玄
    
    </summary>
    
    
      <category term="小城故事" scheme="http://cenrise.com/tags/%E5%B0%8F%E5%9F%8E%E6%95%85%E4%BA%8B/"/>
    
      <category term="历史" scheme="http://cenrise.com/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cenrise.com/2016/05/21/hello-world/"/>
    <id>http://cenrise.com/2016/05/21/hello-world/</id>
    <published>2016-05-20T16:45:41.618Z</published>
    <updated>2016-05-20T05:22:10.175Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java基础之转型</title>
    <link href="http://cenrise.com/2016/05/20/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%BD%AC%E5%9E%8B/"/>
    <id>http://cenrise.com/2016/05/20/Java基础之转型/</id>
    <published>2016-05-20T06:43:49.000Z</published>
    <updated>2016-05-20T06:57:56.119Z</updated>
    
    <content type="html">&lt;p&gt;上转型对象&lt;br&gt;父类的声明指向子类对象（最无争议的说法）&lt;br&gt;父类 对象名 = new 子类构造方法();&lt;br&gt;(1)该对象可以调用子类重写父类的方法(本质)&lt;br&gt;(2)该对象不能调用子类独有的方法&lt;br&gt;(3)上转型对象可以强制转化成子类对象 (进而访问子类独有的方法)&lt;br&gt;父类 :     Person&lt;br&gt;子类 :Teacher    Student&lt;br&gt;Person person = new Teacher();&lt;br&gt;Studnet student= (Student)person;&lt;br&gt;在企业开发的时候,当别人给你传递一个对象的时候,如果对象的类型,不是很确定,要先测试一下，instanceof :java中的一个关键字,专门用来进行对象 类型的测试,跟强制类型转化,经常结合使用&lt;br&gt;    if(person instanceof Student2){&lt;br&gt;      Student2 p2 =(Student2) person;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上转型对象&lt;br&gt;父类的声明指向子类对象（最无争议的说法）&lt;br&gt;父类 对象名 = new 子类构造方法();&lt;br&gt;(1)该对象可以调用子类重写父类的方法(本质)&lt;br&gt;(2)该对象不能调用子类独有的方法&lt;br&gt;(3)上转型对象可以强制转化成子类对象 (进而访问子类独有的
    
    </summary>
    
      <category term="Java" scheme="http://cenrise.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://cenrise.com/tags/java/"/>
    
      <category term="编程语言" scheme="http://cenrise.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>java中Object转String</title>
    <link href="http://cenrise.com/2016/05/20/java%E4%B8%ADObject%E8%BD%ACString/"/>
    <id>http://cenrise.com/2016/05/20/java中Object转String/</id>
    <published>2016-05-20T06:41:37.000Z</published>
    <updated>2016-05-20T07:06:52.601Z</updated>
    
    <content type="html">&lt;p&gt;Object转为String的几种形式&lt;br&gt; 在java项目的实际开发和应用中，常常需要用到将对象转为String这一基本功能。本文将对常用的转换方法进行一个总结。常用的方法有Object.toString()，(String)要转换的对象，String.valueOf(Object)等。下面对这些方法一一进行分析。&lt;br&gt;方法1：采用 Object.toString()方法&lt;br&gt;请看下面的例子：&lt;br&gt;Object object = getObject();&lt;br&gt;System.out.println(object.toString());&lt;br&gt;在这种使用方法中，因为java.lang.Object类里已有public方法.toString()，所以对任何严格意义上的java对象都可以调用此方法。但在使用时要注意，必须保证object不是null值，否则将抛出NullPointerException异常。采用这种方法时，通常派生类会覆盖Object里的toString()方法。&lt;br&gt;方法2：采用类型转换(String)object方法&lt;br&gt;这是标准的类型转换，将object转成String类型的值。使用这种方法时，需要注意的是类型必须能转成String类型。因此最好用instanceof做个类型检查，以判断是否可以转换。否则容易抛出CalssCastException异常。此外，需特别小心的是因定义为Object 类型的对象在转成String时语法检查并不会报错，这将可能导致潜在的错误存在。这时要格外小心。如：&lt;br&gt;Object obj = new Integer(100);&lt;br&gt;String　strVal = (String)obj;&lt;br&gt;在运行时将会出错，因为将Integer类型强制转换为String类型，无法通过。但是，&lt;br&gt;Integer obj = new Integer(100);&lt;br&gt;String　strVal = (String)obj;&lt;br&gt;如是格式代码，将会报语法错误。&lt;br&gt;此外，因null值可以强制转换为任何java类类型，(String)null也是合法的。&lt;br&gt;方法3：采用String.valueOf(Object)&lt;br&gt;String.valueOf(Object)的基础是Object.toString()。但它与Object.toString()又有所不同。在前面方法1的分析中提到，使用第一种时需保证不为null。但采用第三种方法时，将不用担心object是否为null值这一问题。为了便于说明问题，我们来分析一下相关的源代码。Jdk里String.valueOf(Object)源码如下：&lt;br&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Returns the string representation of the Object argument.&lt;br&gt;*&lt;/li&gt;
&lt;li&gt;@param　 obj　 an Object.&lt;/li&gt;
&lt;li&gt;@return　if the argument is null, then a string equal to&lt;br&gt;&lt;em&gt;　　　　　“null”; otherwise, the value of
&lt;/em&gt;　　　　　obj.toString() is returned.&lt;/li&gt;
&lt;li&gt;@see　　 java.lang.Object.toString()&lt;br&gt;*/&lt;br&gt;public static String valueOf(Object obj) {&lt;br&gt;return (obj == null) ? “null” : obj.toString();&lt;br&gt;}&lt;br&gt;从上面的源码可以很清晰的看出null值不用担心的理由。但是，这也恰恰给了我们隐患。我们应当注意到，当object为null时，String.valueOf(object)的值是字符串”null”，而不是null!在使用过程中切记要注意。试想一下，如果我们用&lt;br&gt;if(String.valueOf(object)==null)&lt;br&gt;{&lt;br&gt;System.out.println(“传入的值是null!”);&lt;br&gt;}&lt;br&gt;这样的语句将可能会发生什么问题。再想一下，向控制台输出时，在视觉上如下语句在执行的结果上有什么不同：&lt;br&gt;System.out.println(String.valueOf(null));&lt;br&gt;System.out.println(null);&lt;br&gt;我们看到的输出将是一模一样的东西：null，但它们意义相同吗？&lt;br&gt;判断一个字符串为空&lt;br&gt;s为一个字符串，判断它为空的方法：&lt;br&gt;if   (null==s ||””.equals(s))   {&lt;br&gt;……&lt;br&gt;}&lt;br&gt;注意：这里的null==s和””.equals(s)不要写成s==null和s.equals(s)，因为””这个值是已经确定的，预知的，而s是未知的，所以用得不小心的时候s.equals(“”)就会出现nullpoint异常。在这里虽然不会,因为前面有if(null==s),但是习惯跟在那里使用没有关系的。不一定的equals方法，包括其它很多处理，如果用确定的值处理问题会比未确定的处理少很多bug。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来自 &lt;a href=&quot;http://www.cnblogs.com/sp2012/archive/2012/02/21/2465693.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/sp2012/archive/2012/02/21/2465693.html&lt;/a&gt; &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Object转为String的几种形式&lt;br&gt; 在java项目的实际开发和应用中，常常需要用到将对象转为String这一基本功能。本文将对常用的转换方法进行一个总结。常用的方法有Object.toString()，(String)要转换的对象，String.valueOf(
    
    </summary>
    
    
      <category term="编程语言" scheme="http://cenrise.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://cenrise.com/tags/Java/"/>
    
  </entry>
  
</feed>
